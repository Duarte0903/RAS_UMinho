services:
  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:15672" # Optional. Makes RabbitMQ dashboard available on host: active for debug / management purposes
      - "5672:5672"

    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - rabbitmq-logs:/var/log/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 30s

  queue-setup:
    build: ./queue/
    container_name: queue-setup
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
  
  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000"       # MinIO API
      - "9001:9001"       # MinIO Console
    environment:
      - MINIO_ROOT_USER=admin # MinIO root user
      - MINIO_ROOT_PASSWORD=admin123 # MinIO root password
    volumes:
      - minio-data:/data   # Persistent storage for MinIO
    command: server /data --console-address ":9001"

  postgres:
    build: ./project-ms/database  # Directory containing your PostgreSQL Dockerfile and init.sql
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: projects
      POSTGRES_USER: picturas
      POSTGRES_PASSWORD: picturas
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U picturas -d projects"]
      interval: 10s
      timeout: 5s
      retries: 5

  project-ms:
    build: ./project-ms
    container_name: project-ms
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy


  bezel-tool-ms:
    build: ./picturas-bezel-tool-ms
    container_name: bezel-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy


  watermark-tool-ms:
    build: ./picturas-watermark-tool-ms
    container_name: watermark-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy

  binary-tool-ms:
    build: ./picturas-binarization-tool-ms
    container_name: binarization-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy

  brightness-tool-ms:
    build: ./picturas-brightness-tool-ms
    container_name: brightness-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy

  resize-tool-ms:
    build: ./picturas-resize-tool-ms
    container_name: resize-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy

  removebg-tool-ms:
    build: ./picturas-removebg-tool-ms
    container_name: removebg-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy

  rotation-tool-ms:
    build: ./picturas-rotation-tool-ms
    container_name: rotation-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy
  
  grayscale-tool-ms:
    build: ./picturas-grayscale-tool-ms
    container_name: grayscale-tool-ms
    restart: always
    environment:
      - RABBITMQ_HOST=rabbitmq
      - PICTURAS_LOG_LEVEL=INFO  # change / remove in production
    depends_on:
      rabbitmq:
        condition: service_healthy
volumes:
  rabbitmq-data:
  rabbitmq-logs:
  minio-data:
  postgres-data:
